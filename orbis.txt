Getting started
OrbisDB SDK is an open-source Typescript module available on NPM.
Installation
You can install OrbisDB SDK with any package manager that supports the NPM registry
npm install @useorbis/db-sdk
​
Initialize the SDK
OrbisDB requires some basic configuration to work, mainly Ceramic and OrbisDB node gateways.
There’s a slight difference based on the type of an instance you’re connecting to - learn more about instance types here (link).
Dedicated instance
When running OrbisDB and Ceramic locally, your gateways are
Ceramic - http://localhost:7007
OrbisDB - http://localhost:7008
If you’re not self-hosting the instance, your information should be made available by your provider.
import { OrbisDB } from "@useorbis/db-sdk"

const db = new OrbisDB({
    ceramic: {
        gateway: "YOUR_CERAMIC_NODE_URL"
    },
    nodes: [
        {
            gateway: "YOUR_ORBIS_NODE_URL"
        }
    ]
})
​
Shared instance
When using a shared instance, such as OrbisDB Studio (link), you must provide an environment to connect to.
Environments
Shared OrbisDB instances are multi-tenant nodes that can host multiple, isolated, projects on a single node. All environments share the same underlying hardware, network and Ceramic node, but are logically separate with isolated databases, admins and configurations.
You can find your OrbisDB Studio (link) gateways on the home (Contexts) page.
If you’re using a 3rd party provider, they should provide the information.
import { OrbisDB } from "@useorbis/db-sdk"

const db = new OrbisDB({
    ceramic: {
        gateway: "YOUR_CERAMIC_NODE_URL"
    },
    nodes: [
        {
            gateway: "YOUR_ORBIS_NODE_URL",
            env: "YOUR_ENVIRONMENT_ID"
        }
    ]
})

Authentication
OrbisDB utilizes DIDs (link) for its account management. We managed to abstract all the complexities away and bundle it into a single method call.
Before using the methods, make sure to initialize (link) your OrbisDB SDK.
Authenticating users
Authentication is handled by OrbisAuthenticators which generate the DID session in did:pkh (OrbisEVMAuth, OrbisSolanaAuth, OrbisTezosAuth) and did:key (OrbisKeyDidAuth) formats.
EVM
import { OrbisDB } from "@useorbis/db-sdk"
import { OrbisEVMAuth } from "@useorbis/db-sdk/auth"

// Browser provider (ie. Metamask)
const provider = window.ethereum

// Orbis Authenticator
const auth = new OrbisEVMAuth(provider)

// Authenticate the user and persist the session in localStorage
const authResult: OrbisConnectResult = await orbis.connectUser({ auth })

// Log the result
console.log({ authResult })
​
Solana
import { OrbisDB } from "@useorbis/db-sdk"
import { OrbisSolanaAuth } from "@useorbis/db-sdk/auth"

// Browser provider (ie. Phantom)
const provider = window.solana

// Orbis Authenticator
const auth = new OrbisSolanaAuth(provider)

// Authenticate the user and persist the session in localStorage
const authResult: OrbisConnectResult = await orbis.connectUser({ auth })

// Log the result
console.log({ authResult })
​
KeyDID

import { OrbisDB } from "@useorbis/db-sdk"
import { OrbisKeyDidAuth } from "@useorbis/db-sdk/auth"

// Generate the seed or provide an existing one
const seed = await OrbisKeyDidAuth.generateSeed()

// Initiate the authenticator using the generated (or persisted) seed
const auth = await OrbisKeyDidAuth.fromSeed(seed)

// Authenticate the user and persist the session in localStorage
const authResult: OrbisConnectResult = await orbis.connectUser({ auth })

// Log the result
console.log({ authResult })
​
Sessions
OrbisDB Sessions are stored in localStorage and valid for up to 3 months. To bypass this behavior, you can pass an optional saveSession argument to connectUser.
Sessions are serializable and stored as a base64 encoded string.
Don’t persist the session
// ...
const authResult = await orbis.connectUser({ auth, saveSession: false })
// ...
​
Check if a user is connected
In case no active session is found, the method will check the localStorage for any persisted sessions
// Check if any user is connected
const connected: boolean = await orbis.isUserConnected()

// Check if a user with the specified wallet address is connected
const connected = await orbis.isUserConnected("0x00...")
​
Get the currently connected user
In case no active session is found, the method will check the localStorage for any persisted sessions
// Get details of a currently connected user
const currentUser: boolean = await orbis.getConnectedUser()

console.log({ currentUser })
​
Access the current session
You can access the current session, attestation used (cacao or seed) and the serialized format.
Session are stored using the same type as connectUser and getConnectedUser (OrbisConnectResult).
const session: OrbisConnectResult = orbis.session
​
Connect using a serialized session
In case you want to manage the sessions yourself, you can pass the serialized session to connectUser.
const authResult: OrbisConnectResult = await orbis.connectUser({ serializedSession: <HERE> })

INSERT
When writing data to OrbisDB, users are interacting with the underlying decentralized data network, Ceramic. Find out more about the data flow in our Writing data section (link).
Before using the methods, make sure to initialize (link) your OrbisDB SDK and authenticate (link) the user.
Syntax
Single and bulk inserts share the same syntax with the exception of partial failure possibility in case of bulk inserts.
OrbisDB statements work on the principle of “method chaining” to build and eventually execute the query.
Single insert
const result = await orbis
    .insert("MODEL_ID" | "MODEL_ALIAS")
    .value(
        {
            column: value,
            column2: value2,
        }
    )
    .run()
​
Bulk insert
Bulk statements DO NOT throw, as they are executed in parallel. This means you can have partial failure with only some rows being written. 
const { success, errors } = await orbis
    .insertBulk("MODEL_ID" | "MODEL_ALIAS")
    .values(
        {
            column: value,
            column2: value2,
        },
        {
            column: value,
            column2: value2,
        }
    )
    .run()

if(errors.length){
    console.error("Errors occurred during execution", errors)
}

console.log(success)
​
Contexts
INSERT statements can be scoped to a Context (link) by using .context().
const result = await orbis
    .insert("MODEL_ID" | "MODEL_ALIAS")
    .value(
        {
            column: value,
            column2: value2,
        }
    )
    .context("CONTEXT_ID")
    .run()
​
Statement execution
You do not have to execute the statement immediately. It’s done by either chaining the .run() or executing it later.
If you decide to postpone the execution, you can access a history of all query runs by accessing the statement.runs property.
Immediate execution
const result = await orbis
    .insert("MODEL_ID" | "MODEL_ALIAS")
    .value(
        {
            column: value,
            column2: value2,
        }
    )
    .run()
​
Postponed execution
const statement = orbis
    .insert("MODEL_ID" | "MODEL_ALIAS")
    .value(
        {
            column: value,
            column2: value2,
        }
    )

const result = await statement.run()

console.log(result)

// Log the execution history of this statement
console.log(statement.runs)
​
Local validation
All insert statements can be validated against their Models (link) locally. 
This requires postponed execution syntax.
Local validation is not required, it’s just a quality of life feature. Data validation is ultimately done by the Ceramic node you’re writing the data to.
Single insert
const insertStatement = await orbis
    .insert("MODEL_ID" | "MODEL_ALIAS")
    .value(
        {
            column: value,
            column2: value2,
        }
    )

// Perform local JSON Schema validation before running the query
const validation = await insertStatement.validate()
if(!validation.valid){
    throw "Error during validation: " + validation.error
}

const result = await insertStatement.run()
​
Bulk insert
const insertStatement = await orbis
    .insertBulk("MODEL_ID" | "MODEL_ALIAS")
    .values(
        {
            column: value,
            column2: value2,
        },
        {
            column: value,
            column2: value2,
        }
    )

const validation = await insertStatement.validate()
if(!validation.valid){
    console.error("Errors during validation", validation.errors)
    throw "Errors during validation"
}

const { success, errors } = await insertStatement.run()

# UPDATE

When updating data in OrbisDB, users are interacting with the underlying decentralized data network, Ceramic. Find out more about the data flow in our [Updating data section](https://www.notion.so/Updating-data-UPDATE-d38846a4bff1409dba79a33e5451ab90?pvs=21) (link).

> Before using the methods, make sure to [initialize](https://www.notion.so/Getting-started-12a929384dd644fd9618b2d8e62ddda9?pvs=21) (link) your OrbisDB SDK and [authenticate](https://www.notion.so/Authentication-f3a5e09fa5ae4dda832b2c627b37757b?pvs=21) (link) the user.
> 

# Syntax

OrbisDB updates can perform full or partial row updates. 

> OrbisDB statements work on the principle of “method chaining” to build and eventually execute the query.
> 

## Replace a row

When replacing a row, you need to provide all the required fields (based on the [Model](https://www.notion.so/Models-Tables-37c1bb0333544336b2723debaf67064b?pvs=21) (link)).

```tsx
const result = await orbis
    .update("ROW_ID")
    .replace(
        {
            column: value,
            column2: value2,
        }
    )
    .run()
```

## Update a row partially

Partial row updates will perform a shallow merge of the updated content and the original row. `{ ...new_content, ...original_row }`

```tsx
const result = await orbis
    .update("ROW_ID")
    .set(
        {
            column: value,
        }
    )
    .run()
```

# Contexts

`UPDATE` statements can’t be Context-scoped as the row itself either belongs to a Context or doesn’t.

# Statement execution

You do not have to execute the statement immediately. It’s done by either chaining the `.run()` or executing it later.

If you decide to postpone the execution, you can access a history of all query runs by accessing the `statement.runs` property.

## Immediate execution

```tsx
const result = await orbis
    .update("ROW_ID")
    .replace(
        {
            column: value,
            column2: value2,
        }
    )
    .run()
```

## Postponed execution

```tsx
const statement = orbis
    .update("ROW_ID")
    .replace(
        {
            column: value,
            column2: value2,
        }
    )

const result = await statement.run()

console.log(result)

// Log the execution history of this statement
console.log(statement.runs)
```

# Local validation

Unlike `INSERT` statements, `UPDATEs` don’t have local validation implemented, yet. Validation will be done by the Ceramic node.

SELECT
To query data, users interface with OrbisDB nodes directly. This can be done using a query builder, raw SQL or GraphQL. Node owners also have the option of using our Data dashboard (link) and the provided SQL or GraphQL editors (link).
Check out our Querying data (link) to find out more.
Before using the methods, make sure to initialize (link).
Syntax
OrbisDB SDK provides 2 main ways to query data, ORM-like query builder and raw SQL.
Queries ran using the SDK go through the public API interface and are ran using a read-only PostgreSQL user. This prevents any malicious query attempts at the DB level.
ORM-like (Query builder)
This syntax matches the way INSERTs and UPDATEs work. You build statements by chaining methods and eventually executing them.
const { columns, rows } = await orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            column_name: "value"
        }
    )
    .run()

// SELECT * FROM table WHERE column_name = 'value';
console.log("Retrieved data", rows)
​
Raw SQL
While still utilizing the same method, raw SQL statements do not have additional chained methods to build the statement itself.
const { columns, rows } = await orbis
    .select()
    .raw("SELECT * FROM table WHERE column_name = $1", ["value"])
    .run()

// SELECT * FROM table WHERE column_name = 'value';
console.log("Retrieved data", rows)
​
GraphQL
Execute GraphQL queries with any of the available GraphQL clients for your language of choice. This functionality is not built into the SDK.
// SELECT columnName, anotherColumn FROM table WHERE columnName = 'value';
{
	table(filter:{ column_name: "value" }) {
		column_name,
		another_column	
	}
}
​
Contexts
Query builder
Only SELECT statements built using the query builder can be scoped to a Context (link) by using .context(). You can also run the search across multiple Contexts.
Single context
const { columns, rows } = await orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            column_name: "value"
        }
    )
    .context("CONTEXT_ID")
    .run()
​
Multiple contexts
const { columns, rows } = await orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            column_name: "value"
        }
    )
    .contexts("CONTEXT_ID", "CONTEXT_ID_2")
    .run()
​
Raw SQL
To scope raw SQL statements filter by _metadata_context column using a WHERE clause.
const { columns, rows } = await orbis
    .select()
    .raw("SELECT * FROM table WHERE column_name = $1 AND _metadata_context = $2", ["value", "CONTEXT_ID"])
    .run()
​
GraphQL
{
	table(filter:{ _metadata_context: "CONTEXT_ID" }) {
		column_name,
		another_column	
	}
}
​
Views and Joins
Views can be queried using their name. They can be used via Query builder, raw SQL or GraphQL with no additional configuration required.
Joins are currently not available in the query builder. You can achieve joins using Views, raw SQL or GraphQL.
Statement execution
You do not have to execute the statement immediately. It’s done by either chaining the .run() or executing it later.
If you decide to postpone the execution, you can access a history of all query runs by accessing the statement.runs property.
Immediate execution
const result = await orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            column_name: "value"
        }
    )
    .run()
​
Postponed execution
const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            column_name: "value"
        }
    )

const result = await statement.run()

console.log(result)

// Log the execution history of this statement
console.log(statement.runs)
​
Statement preview
Statements built using the SDK can be previewed. This allows for more clarity before execution.
const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            column_name: "value"
        }
    )

console.log(statement.build()) // SELECT * FROM table WHERE column_name = 'value'
​
Query builder
Query builder comes with a number of operator and helper methods used to build the statement with filters, limits, ordering and more.
This section only applies to queries built using the query builder. It’s not relevant to raw SQL or GraphQL queries.
Columns
By default, all columns will be fetched (SELECT *).
.select()
Pass column names to the select directly to retrieve only a set of columns.
const statement = orbis
    .select("column_1", "column_2", "column_3")
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
​
.column()
Add an additional column to be retrieved.
const statement = orbis
    .select("column_1")
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .column("column_2")
​
.columns()
Add additional columns to be retrieved.
const statement = orbis
    .select("column_1")
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .columns("column_2", "column_3")
​
.deselectColumn()
Remove a column from the set.
const statement = orbis
    .select("column_1", "column_2", "column_3")
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .deselectColumn("column_4")
​
.clearColumns()
Clear all columns and default back to all columns (SELECT *).
const statement = orbis
    .select("column_1", "column_2", "column_3")
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
​
LIMIT
Limit the number of rows retrieved.
const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .limit(5)
​
OFFSET
Offset the result by N rows. Commonly used with LIMIT for naive pagination. 
Performance for large datasets is poor due to row scanning.
const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .offset(5)
​
ORDER BY
Order the results based on a column or a set of columns.
Syntax: .orderBy([”column_name”, “asc” | “desc”], …)
Single column
const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .orderBy(["column", "asc"])
​
Multiple columns
const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .orderBy(["column", "asc"], ["column_2", "desc"])
​
WHERE
WHERE clause is used to narrow down the result set. This can be done using a number of operators. All same-level filters are joined using an AND operator.
Basic syntax
const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            // column = "value"
            column: "value",
            // column_2 in (value1, value2)
            column_2 = ["value1", "value2"]
        }
    )
​
Filter operators
You can find the full list of operators here.
import { contains } from "@useorbis/db-sdk/operators"

const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            // column LIKE "%value%"
            column: contains("value")
        }
    )
​
Logical operators
Logical operators allow you to dictate the order and combination of filter operators.
You can find the full list of operators here.
import { or } from "@useorbis/db-sdk/operators"

const statement = orbis
    .select()
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")
    .where(
        {
            // adds a top level OR
            ...or({ column_2: "value" }),
            // adds an isolated (expression OR expression)
            // joined by the top level AND
            or({ column_3: "value", column_4: "value" })
        }
    )
​
Aggregate operators
Some operators allow you to aggregate operations over columns.
You can find the full list of operators here.
import { sum, count } from "@useorbis/db-sdk/operators"

const statement = orbis
    .select(
	    "column",
	    sum("column_1"), 
	    count("column_2", "total_count")
    )
    .from("MODEL_ID" | "MODEL_ALIAS" | "VIEW")

