import { type DiagnosticsLogger } from '@ceramicnetwork/common';
import type { ChainedKVBatch, IKVFactory, IKVStore, IKVStoreFindResult, StoreSearchParams } from '@ceramicnetwork/core';
import LevelUp from 'levelup';
export declare class S3KVFactory implements IKVFactory {
    #private;
    constructor(bucketName: string, networkName: string, logger: DiagnosticsLogger, customEndpoint?: string);
    storeRoot(networkName?: string): string;
    open(name?: string): Promise<S3KVStore>;
    create(name: string | undefined): Promise<S3KVStore>;
    dirPath(name: string | undefined): Promise<string>;
    close(): Promise<void>;
}
declare class S3KVStore implements IKVStore {
    #private;
    readonly level: LevelUp.LevelUp;
    constructor(level: LevelUp.LevelUp);
    close(): Promise<void>;
    batch(): ChainedKVBatch;
    isEmpty(params?: Partial<StoreSearchParams>): Promise<boolean>;
    findKeys(params?: Partial<StoreSearchParams>): Promise<string[]>;
    find(params?: Partial<StoreSearchParams>): Promise<IKVStoreFindResult[]>;
    exists(key: string): Promise<boolean>;
    put(key: string, value: any): Promise<void>;
    get(key: string): Promise<any>;
    del(key: string): Promise<void>;
}
export {};
//# sourceMappingURL=s3-store.d.ts.map