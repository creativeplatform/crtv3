export class ExpectedCloseError extends Error {
}
export class SSESink {
    constructor(res, stringify = JSON.stringify) {
        this.res = res;
        this.stringify = stringify;
    }
    start(controller) {
        this.res.writeHead(200, {
            Connection: 'keep-alive',
            'Cache-Control': 'no-cache',
            'Content-Type': 'text/event-stream',
        });
        this.res.once('error', controller.error.bind(controller));
        this.res.once('close', () => {
            this.close();
            controller.error(new ExpectedCloseError());
        });
        this.res.once('abort', () => {
            this.abort();
            controller.error(new ExpectedCloseError());
        });
    }
    async write(element) {
        const canWriteMore = this.res.write(`data: ${this.stringify(element)}\n\n`);
        if (!canWriteMore) {
            await new Promise((resolve) => {
                this.res.once('drain', resolve);
            });
        }
    }
    abort() {
        this.res.end();
    }
    close() {
        this.res.end();
    }
}
//# sourceMappingURL=sse-feed.js.map