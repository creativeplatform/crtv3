var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _S3KVFactory_networkName, _S3KVFactory_bucketName, _S3KVFactory_defaultLocation, _S3KVFactory_customEndpoint, _S3KVFactory_cache, _S3KVFactory_createMutex, _S3KVFactory_logger, _S3KVStore_loadingLimit;
import { Networks } from '@ceramicnetwork/common';
import LevelUp from 'levelup';
import S3LevelDOWN from 's3leveldown';
import toArray from 'stream-to-array';
import PQueue from 'p-queue';
import AWSSDK from 'aws-sdk';
import { Mutex } from 'await-semaphore';
function definiteSearchParams(obj) {
    return Object.keys(obj).reduce((acc, key) => obj[key] === undefined || obj[key] === null ? { ...acc } : { ...acc, [key]: obj[key] }, {});
}
const MAX_LOAD_RPS = 4000;
export class S3KVFactory {
    constructor(bucketName, networkName, logger, customEndpoint) {
        _S3KVFactory_networkName.set(this, void 0);
        _S3KVFactory_bucketName.set(this, void 0);
        _S3KVFactory_defaultLocation.set(this, void 0);
        _S3KVFactory_customEndpoint.set(this, void 0);
        _S3KVFactory_cache.set(this, void 0);
        _S3KVFactory_createMutex.set(this, void 0);
        _S3KVFactory_logger.set(this, void 0);
        __classPrivateFieldSet(this, _S3KVFactory_bucketName, bucketName, "f");
        __classPrivateFieldSet(this, _S3KVFactory_networkName, networkName, "f");
        __classPrivateFieldSet(this, _S3KVFactory_defaultLocation, 'state-store', "f");
        __classPrivateFieldSet(this, _S3KVFactory_customEndpoint, customEndpoint, "f");
        __classPrivateFieldSet(this, _S3KVFactory_cache, new Map(), "f");
        __classPrivateFieldSet(this, _S3KVFactory_logger, logger, "f");
        __classPrivateFieldSet(this, _S3KVFactory_createMutex, new Mutex(), "f");
    }
    storeRoot(networkName = __classPrivateFieldGet(this, _S3KVFactory_networkName, "f")) {
        return `${__classPrivateFieldGet(this, _S3KVFactory_bucketName, "f")}/ceramic/${networkName}`;
    }
    async open(name) {
        const fromCache = __classPrivateFieldGet(this, _S3KVFactory_cache, "f").get(name);
        if (fromCache)
            return fromCache;
        return this.create(name);
    }
    create(name) {
        return __classPrivateFieldGet(this, _S3KVFactory_createMutex, "f").use(async () => {
            const fromCache = __classPrivateFieldGet(this, _S3KVFactory_cache, "f").get(name);
            if (fromCache)
                return fromCache;
            const storePath = await this.dirPath(name);
            const levelDown = __classPrivateFieldGet(this, _S3KVFactory_customEndpoint, "f")
                ? new S3LevelDOWN(storePath, new AWSSDK.S3({
                    endpoint: __classPrivateFieldGet(this, _S3KVFactory_customEndpoint, "f"),
                }))
                : new S3LevelDOWN(storePath);
            const levelUp = new LevelUp(levelDown);
            const kv = new S3KVStore(levelUp);
            __classPrivateFieldGet(this, _S3KVFactory_cache, "f").set(name, kv);
            return kv;
        });
    }
    async dirPath(name) {
        let storeRoot = this.storeRoot();
        if (__classPrivateFieldGet(this, _S3KVFactory_networkName, "f") === Networks.MAINNET) {
            const s3 = new AWSSDK.S3();
            const res = await s3
                .listObjectsV2({ Bucket: __classPrivateFieldGet(this, _S3KVFactory_bucketName, "f"), Prefix: 'ceramic/elp', MaxKeys: 1 })
                .promise();
            if (res.Contents?.length) {
                __classPrivateFieldGet(this, _S3KVFactory_logger, "f").warn(`S3 bucket found with ELP location, using it instead of default mainnet location for state store`);
                storeRoot = this.storeRoot('elp');
            }
        }
        if (name) {
            return `${storeRoot}/${__classPrivateFieldGet(this, _S3KVFactory_defaultLocation, "f")}-${name}`;
        }
        else {
            return `${storeRoot}/${__classPrivateFieldGet(this, _S3KVFactory_defaultLocation, "f")}`;
        }
    }
    async close() {
        for (const store of __classPrivateFieldGet(this, _S3KVFactory_cache, "f").values()) {
            await store.close();
        }
    }
}
_S3KVFactory_networkName = new WeakMap(), _S3KVFactory_bucketName = new WeakMap(), _S3KVFactory_defaultLocation = new WeakMap(), _S3KVFactory_customEndpoint = new WeakMap(), _S3KVFactory_cache = new WeakMap(), _S3KVFactory_createMutex = new WeakMap(), _S3KVFactory_logger = new WeakMap();
class S3KVStore {
    constructor(level) {
        _S3KVStore_loadingLimit.set(this, void 0);
        this.level = level;
        __classPrivateFieldSet(this, _S3KVStore_loadingLimit, new PQueue({
            intervalCap: MAX_LOAD_RPS,
            interval: 1000,
            carryoverConcurrencyCount: true,
        }), "f");
    }
    close() {
        return this.level.close();
    }
    batch() {
        return this.level.batch();
    }
    async isEmpty(params) {
        const result = await this.findKeys({
            limit: 1,
            ...params,
        });
        return result.length > 0;
    }
    async findKeys(params) {
        const options = definiteSearchParams({
            keys: true,
            values: true,
            ...params,
        });
        const bufArray = await toArray(this.level.createKeyStream(options));
        return bufArray.map((buf) => buf.toString());
    }
    async find(params) {
        const options = definiteSearchParams({
            keys: true,
            values: true,
            ...params,
        });
        const dataArray = await toArray(this.level.createReadStream(options));
        return dataArray.map((data) => {
            return { key: data.key.toString(), value: JSON.parse(data.value.toString()) };
        });
    }
    async exists(key) {
        try {
            const value = await this.level.get(key);
            return value !== undefined;
        }
        catch (e) {
            if (/Key not found in database/.test(e.toString())) {
                return false;
            }
            else {
                throw e;
            }
        }
    }
    put(key, value) {
        return this.level.put(key, JSON.stringify(value));
    }
    get(key) {
        return __classPrivateFieldGet(this, _S3KVStore_loadingLimit, "f").add(async () => {
            const value = await this.level.get(key);
            return JSON.parse(value);
        });
    }
    del(key) {
        return this.level.del(key);
    }
}
_S3KVStore_loadingLimit = new WeakMap();
//# sourceMappingURL=s3-store.js.map