import type { CeramicApi, Networks } from "@ceramicnetwork/common";
import { MetricPublisher, CeramicNode, PeriodicMetricEventV1 } from "./publishMetrics.js";
import { StreamID } from "@ceramicnetwork/streamid";
export declare const DEFAULT_PUBLISH_INTERVAL_MS = 60000;
export declare enum Counter {
    RECENT_COMPLETED_REQUESTS = "recentCompletedRequests",
    RECENT_ERRORS = "recentErrors"
}
export declare enum Observable {
    TOTAL_PINNED_STREAMS = "totalPinnedStreams",
    TOTAL_INDEXED_MODELS = "totalIndexedModels",
    CURRENT_PENDING_REQUESTS = "currentPendingRequests"
}
interface StartOptions {
    ceramic: CeramicApi;
    network: string;
    nodeId: string;
    intervalMS?: number;
    ceramicVersion?: string;
    ipfsVersion?: string;
    nodeName?: string;
    nodeAuthDID?: string;
    nodeIPAddr?: string;
    nodePeerId?: string;
    logger?: any;
}
interface TaskWithTimestamp {
    timestamp: number;
    [key: string]: any;
}
declare class _NodeMetrics {
    protected publisher: MetricPublisher | undefined;
    protected ceramicNode: CeramicNode | undefined;
    protected metrics: Record<string, number>;
    protected sampleRecentErrors: string[];
    protected totalAnchorCount: number;
    protected totalAnchorAge: number;
    protected maxAnchorAge: number;
    protected logger: any;
    private publishIntervalId;
    private publishIntervalMS;
    private static instance;
    private constructor();
    static getInstance(): _NodeMetrics;
    getModel(network: Networks): StreamID;
    private normalize;
    start(options: StartOptions): void;
    count(name: Counter, value: number): void;
    observe(name: Observable, value: number): void;
    recordError(error: string): void;
    recordAnchorRequestAgeMS(task: TaskWithTimestamp): void;
    getMeanAnchorRequestAgeMS(): number;
    getMetrics(): PeriodicMetricEventV1;
    resetMetrics(): void;
    publish(): Promise<any>;
    startPublishing(): void;
    stopPublishing(flush?: boolean): Promise<void>;
    logInfo(message: string): void;
    logWarn(message: string): void;
    logErr(message: string): void;
}
export declare const NodeMetrics: _NodeMetrics;
export {};
