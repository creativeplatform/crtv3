function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { ModelInstanceDocument } from "@ceramicnetwork/stream-model-instance";
import { NETWORK_MODEL_MAP } from "./constants.js";
export class MetricPublisher {
    async publishMetric(data) {
        const result = await ModelInstanceDocument.create(this.ceramic, data, {
            model: this.modelId
        });
        return result;
    }
    // Throws an error if network does not have an associated metric model
    constructor(ceramic, network){
        _define_property(this, "ceramic", void 0);
        _define_property(this, "modelId", void 0);
        this.ceramic = ceramic;
        const networkEnum = network;
        this.modelId = NETWORK_MODEL_MAP[networkEnum];
        if (!this.modelId) {
            throw new Error(`No metric model available for network ${network}`);
        }
    }
}
