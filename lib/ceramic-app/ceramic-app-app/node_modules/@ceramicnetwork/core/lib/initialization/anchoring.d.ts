import { CeramicSigner, type DiagnosticsLogger, Networks } from '@ceramicnetwork/common';
import { DIDAnchorServiceAuth } from '../anchor/auth/did-anchor-service-auth.js';
import type { CeramicConfig, VersionInfo } from '../ceramic.js';
import type { AnchorService } from '../anchor/anchor-service.js';
export declare const DEFAULT_ANCHOR_SERVICE_URLS: {
    mainnet: string;
    "testnet-clay": string;
    "dev-unstable": string;
    local: string;
};
export declare class UnusableAnchorChainsError extends Error {
    constructor(network: Networks, casURL: string, availableChains: Array<string>, supportedChains: Array<string>);
}
export declare function makeAnchorServiceUrl(fromConfig: string | undefined, network: Networks, logger: DiagnosticsLogger): string;
export declare function usableAnchorChains(network: Networks, anchorService: AnchorService, logger: DiagnosticsLogger): Promise<string[]>;
export declare function makeAnchorServiceAuth(authMethod: string | undefined, anchorServiceUrl: string, network: Networks, logger: DiagnosticsLogger, signer: CeramicSigner): DIDAnchorServiceAuth | null;
export declare function makeAnchorService(config: CeramicConfig, ethereumRpcUrl: string | undefined, network: Networks, logger: DiagnosticsLogger, versionInfo: VersionInfo, signer: CeramicSigner): AnchorService;
export declare function makeEthereumRpcUrl(fromConfig: string | undefined, network: Networks, logger: DiagnosticsLogger): string | undefined;
//# sourceMappingURL=anchoring.d.ts.map