class NotAnchoredError extends Error {
    constructor(txHash) {
        super(`Txn ${txHash} was not recently anchored by the InMemoryAnchorService`);
    }
}
export class InMemoryAnchorValidator {
    constructor(chainId, transactionCache) {
        this.ethereumRpcEndpoint = null;
        this.transactionCache = transactionCache;
        this.chainId = chainId;
    }
    async init() {
    }
    async validateChainInclusion(anchorProof) {
        const key = anchorProof.txHash.toString();
        const found = this.transactionCache.get(key);
        if (!found) {
            throw new NotAnchoredError(anchorProof.txHash);
        }
        return found;
    }
}
//# sourceMappingURL=in-memory-anchor-validator.js.map