import { SyncOptions } from '@ceramicnetwork/common';
import { CeramicClient } from '@ceramicnetwork/http-client';
import { Command as CoreCommand } from '@oclif/core';
import { type DIDProvider, DID } from 'dids';
import type { ResolverRegistry } from 'did-resolver';
import type { Ora } from 'ora';
type StringRecord = Record<string, unknown>;
export declare const SYNC_OPTIONS_MAP: Record<string, SyncOptions | undefined>;
export interface CommandFlags {
    'ceramic-url': string;
    'did-private-key': string;
    [key: string]: unknown;
}
export type QueryCommandFlags = CommandFlags & {
    sync?: string;
};
export declare const STREAM_ID_ARG: import("@oclif/core/lib/interfaces").Arg<string, Record<string, unknown>>;
export declare const parseSyncFlag: (value: string | undefined) => SyncOptions | undefined;
export declare const SYNC_OPTION_FLAG: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces").CustomOptions>;
export declare abstract class BaseCommand<Flags extends StringRecord = StringRecord, Args extends StringRecord = StringRecord> extends CoreCommand {
    args: Args;
    flags: Flags;
    stdin: string | undefined;
    spinner: Ora;
    init(): Promise<void>;
    logJSON(data: unknown): void;
}
export declare abstract class Command<Flags extends CommandFlags = CommandFlags, Args extends StringRecord = StringRecord> extends BaseCommand {
    #private;
    static flags: {
        'ceramic-url': import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces").CustomOptions>;
        'did-private-key': import("@oclif/core/lib/interfaces").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces").CustomOptions>;
    };
    args: Args;
    flags: Flags;
    init(): Promise<void>;
    finally(): Promise<void>;
    get authenticatedDID(): DID;
    get ceramic(): CeramicClient;
    get resolverRegistry(): ResolverRegistry;
    getProvider(seed: string): DIDProvider;
    getDID(): DID;
    getAuthenticatedDID(seed: string): Promise<DID>;
}
export {};
