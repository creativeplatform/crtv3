function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Command } from '../../command.js';
import { Flags } from '@oclif/core';
import { readEncodedComposite, writeEncodedComposite } from '@composedb/devtools-node';
import { Composite } from '@composedb/devtools';
class CompositeExtractModel extends Command {
    async run() {
        const parsed = await this.parse(CompositeExtractModel);
        const allArgs = parsed.raw.filter((token)=>{
            return token.type === 'arg';
        }).map((token)=>{
            return token.input;
        });
        try {
            this.spinner.start('Creating a composite with specified models...');
            let composite = undefined;
            let modelsToExtract = [];
            if (this.stdin !== undefined && allArgs.length >= 1) {
                const definition = JSON.parse(this.stdin);
                composite = await Composite.fromJSON({
                    ceramic: this.ceramic,
                    definition
                });
                modelsToExtract = allArgs;
            } else if (this.stdin === undefined && allArgs.length >= 2) {
                composite = await readEncodedComposite(this.ceramic, allArgs[0]);
                modelsToExtract = allArgs.splice(1);
            } else if (this.stdin !== undefined && allArgs.length < 1) {
                this.spinner.fail('When the composite is passed as JSON in stdin, at least one model to extract needs to be passed as param');
                return;
            } else {
                this.spinner.fail('Missing composite path and at least one model to extract');
                return;
            }
            const newComposite = composite.copy(modelsToExtract);
            if (this.flags.output != null) {
                const output = this.flags.output;
                await writeEncodedComposite(newComposite, output);
                this.spinner.succeed(` Creating a composite with specified models... Composite was created and its encoded representation was saved in ${output}`);
            } else {
                this.spinner.succeed('Creating a composite with specified models... Done!');
                // Logging the encoded representation to stdout, so that it can be piped using standard I/O or redirected to a file
                this.log(JSON.stringify(newComposite.toJSON()));
            }
        } catch (e) {
            this.spinner.fail(e.message);
            return;
        }
    }
}
_define_property(CompositeExtractModel, "strict", false);
_define_property(CompositeExtractModel, "description", 'create a Composite from a list of model streams');
_define_property(CompositeExtractModel, "flags", {
    ...Command.flags,
    output: Flags.string({
        char: 'o',
        description: 'path to the file where the composite representation should be saved'
    })
});
export { CompositeExtractModel as default };
