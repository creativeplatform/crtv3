function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Command } from '../../command.js';
import { Args, Flags } from '@oclif/core';
import fs from 'fs-extra';
import { writeGraphQLSchema } from '@composedb/devtools-node';
import { printGraphQLSchema } from '@composedb/runtime';
class GraphQLSchema extends Command {
    async run() {
        try {
            const definitionPath = this.stdin || this.args.runtimeDefinitionPath;
            if (definitionPath === undefined) {
                this.spinner.fail('You need to pass a composite runtime definition path either as an argument or via stdin');
                return;
            }
            const definitionFile = await fs.readFile(definitionPath);
            const runtimeDefinition = JSON.parse(definitionFile.toString());
            if (this.flags.output != null) {
                await writeGraphQLSchema(runtimeDefinition, this.flags.output, this.flags.readonly);
                this.spinner.succeed(`The schema was saved in ${this.flags.output}`);
            } else {
                // Logging the schema to stdout, so that it can be piped using standard I/O or redirected to a file
                this.log(printGraphQLSchema(runtimeDefinition, this.flags.readonly));
            }
        } catch (e) {
            this.spinner.fail(e.message);
            return;
        }
    }
}
_define_property(GraphQLSchema, "description", 'Load the graphQL schema from Composite ');
_define_property(GraphQLSchema, "args", {
    runtimeDefinitionPath: Args.string({
        required: false,
        description: 'ID of the stream'
    })
});
_define_property(GraphQLSchema, "flags", {
    ...Command.flags,
    output: Flags.string({
        char: 'o',
        description: 'path to the file where the composite representation should be saved'
    }),
    readonly: Flags.boolean({
        description: 'a boolean flag indicating whether the output schema should be readonly'
    })
});
export { GraphQLSchema as default };
