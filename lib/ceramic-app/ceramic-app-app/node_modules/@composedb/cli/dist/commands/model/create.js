function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Args } from '@oclif/core';
import { Model } from '@ceramicnetwork/stream-model';
import { Command } from '../../command.js';
class CreateModel extends Command {
    async run() {
        this.spinner.start('Creating the model...');
        try {
            const model = await Model.create(this.ceramic, JSON.parse(this.args.content), {
                controller: this.authenticatedDID.id
            });
            this.spinner.succeed('Creating the model... Done!');
            // Logging the stream id to stdout, so that it can be piped using standard I/O or redirected to a file
            this.log(model.id.toString());
        } catch (e) {
            this.spinner.fail(e.message);
            return;
        }
    }
}
_define_property(CreateModel, "description", 'create a model stream from content encoded as JSON');
_define_property(CreateModel, "args", {
    content: Args.string({
        required: true,
        description: 'Model content (JSON encoded as string)'
    })
});
export { CreateModel as default };
