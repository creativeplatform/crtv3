function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Command } from '../../command.js';
import { Args } from '@oclif/core';
import { readEncodedComposite } from '@composedb/devtools-node';
import { Composite } from '@composedb/devtools';
class CompositeDeploy extends Command {
    async run() {
        try {
            this.spinner.start('Deploying the composite...');
            let composite = undefined;
            if (this.stdin !== undefined) {
                const definition = JSON.parse(this.stdin);
                composite = await Composite.fromJSON({
                    ceramic: this.ceramic,
                    definition,
                    index: true
                });
            } else if (this.args.compositePath !== undefined) {
                composite = await readEncodedComposite(this.ceramic, this.args.compositePath, true);
            } else {
                this.spinner.fail('You need to pass the composite definition either in stdin or as the compositePath param');
                return;
            }
            this.spinner.succeed(`Deploying the composite... Done!`);
            // Logging the model stream IDs to stdout, so that they can be piped using standard I/O or redirected to a file
            this.log(JSON.stringify(Object.keys(composite.toParams().definition.models)));
        } catch (e) {
            this.spinner.fail(e.message);
            return;
        }
    }
}
_define_property(CompositeDeploy, "description", 'deploy models included in the composite on connected ceramic node');
_define_property(CompositeDeploy, "args", {
    compositePath: Args.string({
        required: false,
        description: 'A path to encoded composite definition'
    })
});
export { CompositeDeploy as default };
