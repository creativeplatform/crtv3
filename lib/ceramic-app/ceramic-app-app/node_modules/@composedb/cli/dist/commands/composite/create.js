function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Command } from '../../command.js';
import { Args, Flags } from '@oclif/core';
import { createComposite, writeEncodedComposite } from '@composedb/devtools-node';
class CreateComposite extends Command {
    async run() {
        try {
            this.spinner.start('Creating the composite...');
            const composite = await createComposite(this.ceramic, this.args.schemaFilePath);
            if (this.flags.output != null) {
                const output = this.flags.output;
                await writeEncodedComposite(composite, output);
                this.spinner.succeed(`Creating the composite... Done! The encoded representation was saved in ${output}`);
            } else {
                this.spinner.succeed('Creating the composite... Done!');
                // Logging the encoded representation to stdout, so that it can be piped using standard I/O or redirected to a file
                this.log(JSON.stringify(composite.toJSON()));
            }
        } catch (e) {
            console.error(e);
            this.spinner.fail(e.message);
            return;
        }
    }
}
_define_property(CreateComposite, "description", 'create a Composite (a list of Model Streams) from a graphQL Schema Definition Language definition');
_define_property(CreateComposite, "args", {
    schemaFilePath: Args.string({
        required: true,
        description: 'A graphQL SDL definition of the Composite encoded as a string'
    })
});
_define_property(CreateComposite, "flags", {
    ...Command.flags,
    output: Flags.string({
        char: 'o',
        description: 'path to the file where the composite representation should be saved'
    })
});
export { CreateComposite as default };
