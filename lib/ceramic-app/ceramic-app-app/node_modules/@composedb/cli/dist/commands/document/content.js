function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { ModelInstanceDocument } from '@ceramicnetwork/stream-model-instance';
import { Command, parseSyncFlag, STREAM_ID_ARG, SYNC_OPTION_FLAG } from '../../command.js';
import { Flags } from '@oclif/core';
import { write } from '../../fs.js';
class DocumentContent extends Command {
    async run() {
        try {
            this.spinner.start('Loading the model instance...');
            const mid = await ModelInstanceDocument.load(this.ceramic, this.args.streamId, {
                sync: parseSyncFlag(this.flags.sync)
            });
            if (this.flags.output != null) {
                const output = this.flags.output;
                await write(output, mid.content);
                this.spinner.succeed(`Loading the model instance document... Done! The content was saved in ${output}`);
            } else {
                this.spinner.succeed(`Loading the model instance document... Done!`);
                // Logging the content to stdout, so that it can be piped using standard I/O or redirected to a file
                this.log(JSON.stringify(mid.content));
            }
        } catch (e) {
            this.spinner.fail(e.message);
            return;
        }
    }
}
_define_property(DocumentContent, "description", 'load a model instance stream document with a given stream id and display its contents');
_define_property(DocumentContent, "args", {
    streamId: STREAM_ID_ARG
});
_define_property(DocumentContent, "flags", {
    ...Command.flags,
    output: Flags.string({
        char: 'o',
        description: 'path to the file where the model instance content should be saved'
    }),
    sync: SYNC_OPTION_FLAG
});
export { DocumentContent as default };
