function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Command } from '../../command.js';
import { Args } from '@oclif/core';
import { ModelInstanceDocument } from '@ceramicnetwork/stream-model-instance';
import { StreamID } from '@ceramicnetwork/streamid';
class CreateDocument extends Command {
    async run() {
        this.spinner.start('Creating the model instance document...');
        try {
            const mid = await ModelInstanceDocument.create(this.ceramic, this.args.content, {
                controller: this.authenticatedDID.id,
                model: this.args.model
            });
            this.spinner.succeed(`Creating the model instance document... Done!`);
            // Logging the stream id to stdout, so that it can be piped using standard I/O or redirected to a file
            this.log(mid.id.toString());
        } catch (e) {
            this.spinner.fail(e.message);
        }
    }
}
_define_property(CreateDocument, "description", 'create a model instance document stream from content encoded as JSON');
_define_property(CreateDocument, "args", {
    model: Args.custom({
        required: true,
        description: 'StreamID of the model whose instance is being created',
        parse: (input)=>Promise.resolve(StreamID.fromString(input))
    })(),
    content: Args.custom({
        required: true,
        description: 'Content of the created model instance document (JSON encoded as string)',
        parse: (input)=>Promise.resolve(JSON.parse(input))
    })()
});
export { CreateDocument as default };
