function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Command, STREAM_ID_ARG } from '../../command.js';
import { Args } from '@oclif/core';
import { ModelInstanceDocument } from '@ceramicnetwork/stream-model-instance';
class DocumentReplace extends Command {
    async run() {
        this.spinner.start('Replacing content in the model instance document...');
        try {
            const mid = await ModelInstanceDocument.load(this.ceramic, this.args.streamId);
            this.log('CONTENT', this.args.content);
            await mid.replace(this.args.content);
            this.spinner.succeed(`Replacing content in the model instance document... Done!`);
        } catch (e) {
            this.spinner.fail(e.message);
        }
    }
}
_define_property(DocumentReplace, "description", 'replace content in a model instance document stream');
_define_property(DocumentReplace, "args", {
    streamId: STREAM_ID_ARG,
    content: Args.custom({
        required: true,
        description: 'New content of the model instance document (JSON encoded as string)',
        parse: (input)=>Promise.resolve(JSON.parse(input))
    })()
});
export { DocumentReplace as default };
