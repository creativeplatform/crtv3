function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { randomBytes } from 'crypto';
import { toString } from 'uint8arrays';
import { Command } from '../../command.js';
class GeneratePrivateKey extends Command {
    async run() {
        try {
            this.spinner.start('Generating random private key...');
            const seed = new Uint8Array(randomBytes(32));
            this.spinner.succeed('Generating random private key... Done!');
            // Logging the seed to stdout, so that it can be piped using standard I/O or redirected to a file
            this.log(toString(seed, 'base16'));
            return Promise.resolve();
        } catch (err) {
            this.spinner.fail(err.message);
        }
    }
}
_define_property(GeneratePrivateKey, "description", 'generate a random 32 bytes private key');
_define_property(GeneratePrivateKey, "flags", Command.flags);
export { GeneratePrivateKey as default };
