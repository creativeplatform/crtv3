function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Model } from '@ceramicnetwork/stream-model';
import { Command, parseSyncFlag, STREAM_ID_ARG, SYNC_OPTION_FLAG } from '../../command.js';
class ModelController extends Command {
    async run() {
        this.spinner.start('Loading the model...');
        try {
            const model = await Model.load(this.ceramic, this.args.streamId, {
                sync: parseSyncFlag(this.flags.sync)
            });
            this.spinner.succeed(`Loading the model... Done!`);
            // Logging the controller to stdout, so that it can be piped using standard I/O or redirected to a file
            this.log(model.metadata.controller);
        } catch (e) {
            this.spinner.fail(e.message);
            return;
        }
    }
}
_define_property(ModelController, "description", 'load a model stream with a given stream id and display its controller');
_define_property(ModelController, "args", {
    streamId: STREAM_ID_ARG
});
_define_property(ModelController, "flags", {
    ...Command.flags,
    sync: SYNC_OPTION_FLAG
});
export { ModelController as default };
