function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { Command } from '../../command.js';
import { Args } from '@oclif/core';
import { DID } from 'dids';
import { Ed25519Provider } from 'key-did-provider-ed25519';
import { fromString } from 'uint8arrays';
class DIDFromPrivateKey extends Command {
    async run() {
        this.spinner.start('Creating DID...');
        const possibleSeedInputs = [
            this.stdin,
            this.args.didPrivateKey,
            this.flags['did-private-key']
        ];
        if (possibleSeedInputs.every((input)=>input === undefined)) {
            this.spinner.fail(`You need to pass the private key parameter as a positional arg, as a flag value, via stdin or as the DID_PRIVATE_KEY environmental variable`);
            return;
        } else if (possibleSeedInputs.filter((input)=>input !== undefined).length > 1) {
            this.spinner.fail(`Don't pass the private key parameter in more than one way out of: arg, flag, stdin, DID_PRIVATE_KEY environmental variable`);
            return;
        }
        try {
            const hexString = possibleSeedInputs.find((input)=>input !== undefined) || '';
            const seed = fromString(hexString, 'base16');
            const did = new DID({
                provider: new Ed25519Provider(seed),
                resolver: this.resolverRegistry
            });
            await did.authenticate();
            this.spinner.succeed(`Creating DID... Done!`);
            // Logging the DID to stdout, so that it can be piped using standard I/O or redirected to a file
            this.log(did.id);
        } catch (err) {
            this.warn(`Invalid DID private key.  Did you generate the private key using 'composedb did:generate-private-key'?`);
            this.spinner.fail(err.message);
        }
    }
}
_define_property(DIDFromPrivateKey, "description", 'create a new DID from a specified private key');
_define_property(DIDFromPrivateKey, "args", {
    didPrivateKey: Args.string({
        required: false,
        description: 'a random 32-bit private key represented as a base16 string'
    })
});
export { DIDFromPrivateKey as default };
