import type { StreamMetadata, StreamState } from '@ceramicnetwork/common';
import { Subject, type Observable } from 'rxjs';
import { CommitID } from '@ceramicnetwork/streamid';
export declare class FeedDocument {
    readonly commitId: CommitID;
    readonly content: any;
    readonly metadata: StreamMetadata;
    constructor(commitId: CommitID, content: any, metadata: StreamMetadata);
    static fromStreamState(streamState: StreamState): FeedDocument;
}
declare class DocumentsSubject extends Subject<FeedDocument> {
}
export interface PublicFeed {
    aggregation: {
        documents: Observable<FeedDocument>;
    };
}
export declare class Feed implements PublicFeed {
    readonly aggregation: {
        documents: DocumentsSubject;
    };
}
export {};
//# sourceMappingURL=feed.d.ts.map